@inherits CmsPageBase

@page "/settings"

<PageTitle>@Translations!["Settings"] - @Cms.System?.SystemName</PageTitle>

@if (CurrentPage is { LoginInfo.IsLogged: true })
{
    <div id="settings-header" class="content-item header-center width75">
        <h1>@Translations!["Settings"] <Icon Name="settings" /></h1>

        @if (IsLoggedIn(Role.Admin))
        {
            <div class="content-item-2 header-center">
                <h2 class="standard-margin">@Translations!["Admin"] <Icon Name="engineering"/></h2>
                <div class="settings-options-container">

                    <NavigationItem Text=@Translations!["Change logo"]
                                    IconName="image"
                                    UriPath="/admin/change-logo"/>

                    <NavigationItem Text=@Translations!["Change colors"]
                                    IconName="palette"
                                    UriPath="/admin/change-colors"/>

                    <NavigationItem Text=@Translations!["Edit CMS settings"]
                                    IconName="edit"
                                    UriPath="/admin/cms-settings"/>

                    <NavigationItem Text=@Translations!["Edit Terms of Service"]
                                    IconName="edit"
                                    UriPath="/admin/edit-tos"/>

                    <NavigationItem Text=@Translations!["Edit users"]
                                    IconName="edit"
                                    UriPath="/admin/edit-users"/>

                    <NavigationItem Text=@Translations!["Edit contact"]
                                    IconName="edit"
                                    UriPath="/admin/edit-contact"/>

                    <NavigationItem Text=@Translations!["Send email"]
                                    IconName="email"
                                    UriPath="/admin/send-email"/>

                    <NavigationItem Text=@Translations!["Edit allowed phone numbers"]
                                    IconName="call"
                                    UriPath="/admin/edit-phones"/>

                </div>
            </div>
        }

        @if (IsLoggedIn(Role.Moderator))
        {
            <div class="content-item-2 header-center">
                <h2>@Translations!["Moderator"] <Icon Name="manage_accounts" /></h2>
                <div class="settings-options-container">

                    <NavigationItem Text=@Translations!["Check reports"]
                            IconName="search"
                            UriPath="/moderator/check-reports" />

                    <NavigationItem Text=@Translations!["Ban user"]
                            IconName="person_off"
                            UriPath="/moderator/ban-user" />

                    <NavigationItem Text=@Translations!["Unban user"]
                            IconName="person"
                            UriPath="/moderator/unban-user" />

                </div>
            </div>
        }

        @if (IsLoggedIn(Role.FactChecker))
        {
            <div class="content-item-2 header-center">
                <h2>@Translations!["Fact checker"] <Icon Name="person_search" /></h2>
                <div class="settings-options-container">

                    <NavigationItem Text=@Translations!["Check reports"]
                            IconName="search"
                            UriPath="/fact-checker/check-reports" />

                    <NavigationItem Text=@Translations!["New fact"]
                            IconName="add_box"
                            UriPath="/fact-checker/new-fact" />

                    <NavigationItem Text=@Translations!["Delete fact"]
                            IconName="delete"
                            UriPath="/fact-checker/delete-fact" />

                </div>
            </div>
        }

        @if (IsLoggedIn(Role.User))
        {
            <div class="content-item-2 header-center">
                <h2>@Translations!["User"] <Icon Name="person" /></h2>
                <div class="settings-options-container">

                    <NavigationItem Text=@Translations!["Change avatar"]
                            IconName="image"
                            UriPath="/user/change-avatar" />

                    <NavigationItem Text=@Translations!["Change password"]
                            IconName="edit_square"
                            UriPath="/user/change-password" />

                    @if (Cms.Auth?.Type is AuthType.Email or AuthType.EmailAndSms)
                    {
                        <NavigationItem Text=@Translations!["Change email"]
                            IconName="mail"
                            UriPath="/user/change-email" />
                    }


                    @if (Cms.Auth?.Type is AuthType.Sms or AuthType.EmailAndSms)
                    {
                        <NavigationItem Text=@Translations!["Change phone number"]
                            IconName="call"
                            UriPath="/user/change-phone" />
                    }

                    <NavigationItem Text=@Translations!["Login history"]
                            IconName="history"
                            UriPath="/user/sessions" />

                    <NavigationItem Text=@Translations!["Delete account"]
                            IconName="delete"
                            UriPath="javascript:void(0)" 
                            @onclick="@DeleteAccount" />

                </div>
            </div>
        }
    </div>
}

@code {

    private async Task DeleteAccount()
    {
        var confirmation = Modal!.Show<Modals.ConfirmModal>("");
        var confirmationResult = await confirmation.Result;

        if (confirmationResult.Cancelled)
        {
            return;
        }

        var deleteAccount = await UserModel.Delete(CurrentPage?.LoginInfo.AccessToken);

        if (deleteAccount.Status.Equals(false))
        {
            await Error();
            return;
        }

        if (deleteAccount.Result is List<string>)
        {
            List<string> filesToDelete = (List<string>)deleteAccount.Result;
            foreach (var file in filesToDelete)
            {
                try
                {
                    File.Delete(Path.Combine("wwwroot/img", file));
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
        }

        await Logout();
    }
}
